CREATE USER bankingDB
IDENTIFIED BY p4ssw0rd;

GRANT CONNECT TO bankingDB;
GRANT RESOURCE TO bankingDB;

CREATE TABLE ACCOUNTTYPE
(
T_ID NUMBER,
TYPE_NAME VARCHAR2(50),
CONSTRAINT PK_AType PRIMARY KEY(T_ID)
);

CREATE TABLE ACCOUNT
(
ACCT_ID NUMBER,
BALANCE NUMBER(12,2) DEFAULT 0.0,
TYPE_ID NUMBER NOT NULL,
OPENED DATE NOT NULL,
CLOSED DATE,
CONSTRAINT PK_ACCOUNT PRIMARY KEY  (ACCT_ID),
CONSTRAINT FK_ACCT_TYPE FOREIGN KEY (TYPE_ID) REFERENCES ACCOUNTTYPE(T_ID)
);

CREATE TABLE USERS
(
U_ID NUMBER,
FIRST_NAME VARCHAR(20) NOT NULL,
LAST_NAME VARCHAR(20) NOT NULL,
EMAIL VARCHAR(50) NOT NULL UNIQUE,
PASSWORD VARCHAR(50)NOT NULL,
CONSTRAINT PK_USER PRIMARY KEY  (U_ID)
);

CREATE TABLE USER_ACCOUNT
(
USER_ID NUMBER,
ACCOUNT_ID NUMBER,

CONSTRAINT PK_JOINED PRIMARY KEY(USER_ID, ACCOUNT_ID),
CONSTRAINT FK_USER FOREIGN KEY(USER_ID) REFERENCES USERS(U_ID),
CONSTRAINT FK_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCT_ID)
);

/
INSERT INTO ACCOUNTTYPE VALUES(1, 'Checking');
INSERT INTO ACCOUNTTYPE VALUES(2, 'Saving');
INSERT INTO ACCOUNTTYPE VALUES(3, 'Credit');
SELECT * FROM ACCOUNTTYPE;
/
CREATE SEQUENCE U_SEQ
START WITH 100
INCREMENT BY 5;
/
CREATE SEQUENCE A_SEQ
START WITH 10000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER U_SEQ_TRIGGER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  IF :NEW.U_ID IS NULL THEN
    SELECT U_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
  END IF;
END;
/
CREATE OR REPLACE TRIGGER A_SEQ_TRIGGER
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
  IF :NEW.ACCT_ID IS NULL THEN
    SELECT A_SEQ.NEXTVAL INTO :NEW.ACCT_ID FROM DUAL;
  END IF;
END;
/
INSERT INTO USERS(FIRST_NAME, LAST_NAME, EMAIL, PASSWORD)
VALUES('Arthur','Faugue','afaugue','pass');
/
commit;
/
SELECT * FROM USERS WHERE EMAIL = 'afaugue' AND PASSWORD = 'pass';
/
select * from users where u_id = ?;
/
CREATE OR REPLACE FUNCTION GET_RECENT_ACCID
RETURN NUMBER
IS ACCID NUMBER;
BEGIN
  SELECT MAX(ACCT_ID) INTO ACCID
  FROM ACCOUNT;
  RETURN ACCID;
END;
/
insert into ACCOUNT(balance, type_id)
values(100, 2);
/
insert into USER_ACCOUNT(user_id, account_id)
values(200, 1000);
/
select GET_RECENT_ACCID from dual;
/
create or replace procedure get_accounts(uid in number)
is
begin
	select user_account.account_id, account.balance
	into dual from account 
	full outer join user_account on user_id = uid;
end;
/
select user_account.account_id, account.balance
	from account 
	full outer join user_account on user_id = 200;
/
select balance from account where acct_id = 10000;
/
insert into USER_ACCOUNT(user_id, account_id)
values(?, ?);