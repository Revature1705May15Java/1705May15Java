package com.ers.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import com.ers.pojos.Employee;
import com.ers.pojos.RequestType;
import com.ers.pojos.Requests;
import com.ers.util.ConnectionFactory;

public class DaoImp implements DAO 
{
	//finds and returns an employee based on the email
	public Employee getEmployee(String email)
	{
		//value used to store employee fetched from database
		Employee e = new Employee();
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			//asks database to fetch employee where the email matches the email passed to the method
			String sql = "select * from employee where email = ?";
			PreparedStatement ps = connect.prepareStatement(sql);
			ps.setString(1, email);
			
			ResultSet info = ps.executeQuery();
			
			//stores result set in the employee object
			while(info.next())
			{
				e.setEmployeeId(info.getInt(1));
				e.setfName(info.getString(2));
				e.setlName(info.getString(3));
				e.setIsManager(info.getInt(4));
				e.setEmail(info.getString(5));
				e.setPass(info.getString(6));
			}
			
			//sets a defualt value if the employee is not found
			if(email == null)
			{
				e.setEmployeeId(0);
			}
			
			return e;
		} 
		catch (SQLException sq) 
		{
			// TODO Auto-generated catch block
			sq.printStackTrace();
		}
		
		//in case of errors
		System.out.println("ERROR");
		e.setEmployeeId(0);
		return e;
	}
	
	//finds and returns an employee based on the id
	public Employee getEmployeeByID(int id)
	{
		//value used to store employee fetched from database
		Employee e = new Employee();
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			//asks database to fetch employee where the email matches the email passed to the method
			String sql = "select * from employee where employeeID = ?";
			PreparedStatement ps = connect.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet info = ps.executeQuery();
			
			//stores result set in the employee object
			while(info.next())
			{
				e.setEmployeeId(info.getInt(1));
				e.setfName(info.getString(2));
				e.setlName(info.getString(3));
				e.setIsManager(info.getInt(4));
				e.setEmail(info.getString(5));
				e.setPass(info.getString(6));
			}
			
			return e;
		} 
		catch (SQLException sq) 
		{
			// TODO Auto-generated catch block
			sq.printStackTrace();
		}
		
		//in case of errors
		System.out.println("ERROR");
		e.setEmployeeId(0);
		return e;
	}
	
	//gets and returns all employees currently in the database
	public ArrayList<Employee> getAllEmployee()
	{
		//values used to store employees fetched from the database
		ArrayList<Employee> allE = new ArrayList<Employee>();
		Employee e;
		
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			String sql = "select * from employee";
			PreparedStatement ps = connect.prepareStatement(sql);
			
			ResultSet info = ps.executeQuery();
			
			while(info.next())
			{
				 e = new Employee();
				
				e.setEmployeeId(info.getInt(1));
				e.setfName(info.getString(2));
				e.setlName(info.getString(3));
				e.setIsManager(info.getInt(4));
				e.setEmail(info.getString(5));
				e.setPass(info.getString(6));
				
				allE.add(e);
			}
			
			return allE;
		} 
		catch (SQLException sq) 
		{
			// TODO Auto-generated catch block
			sq.printStackTrace();
		}
		
		return allE;
	}
	
	
	//adds an employee to the database based on the info passed to the method
	 public int addEmployee(String fn, String ln, String email, String pass, int isM)
	 {
			
			try(Connection connection = ConnectionFactory.getInstance().getConnection();)
			{
				
				String sql = " insert into employee (firstname, lastname, ismanager, email, pass)"
							+ "values (?,?,?,?,?)";
				
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setString(1, fn);
				ps.setString(2, ln);
				ps.setInt(3, isM);
				ps.setString(4, email);
				ps.setString(5, pass);
				
				int num = ps.executeUpdate();
				
				
				return num;
				
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return 0;
	 }
	
	 //changes info for an employee in the database given to the method
	 public int updateEmployee(int id, String fn, String ln)
	 {
			
			try(Connection connection = ConnectionFactory.getInstance().getConnection();)
			{
				
				String sql = "update employee set firstname = ?, lastname = ?"
							+ "where employeeId = ?";
				
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setString(1, fn);
				ps.setString(2, ln);
				ps.setInt(4, id);
				
				int num = ps.executeUpdate();
				
				
				return num;
				
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return 0;
	 }
	 
	//takes data inputed and makes a new request in the database
	public int addRequest(int type, double amount, String purpose, int requster) 
	{
		
		try(Connection connection = ConnectionFactory.getInstance().getConnection();)
		{
			
			String sql = " insert into requests (type, amount, purpose, requester)"
						+ "values (?,?,?,?)";
			
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, type);
			ps.setDouble(2, amount);
			ps.setString(3, purpose);
			ps.setInt(4, requster);
			
			int num = ps.executeUpdate();
			
			
			return num;
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return 0;
	}
	
	
	//updates the request with nessecary info when it is resolved by a manager
	 public int resolveRequest(int id, int type, int resolver, String note)
	 {
			
			try(Connection connection = ConnectionFactory.getInstance().getConnection();)
			{
				
				String sql = "update requests set type = ?, Resolver = ?, resolved = ?, note = ?"
							+ "where requestID = ?";
				
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setInt(1, type);
				ps.setInt(2, resolver);
				
				//getting current date to insert into the resolved field
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
				Date date = new Date();
				ps.setDate(3, new java.sql.Date(date.getTime()));
				
				ps.setString(4, note);
				ps.setInt(5, id);
				
				int num = ps.executeUpdate();
				
				
				return num;
				
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return 0;
	 }
	
	//gets all requests related to a specific employee
	public ArrayList<Requests> getR(int id)
	{
		ArrayList<Requests> reqs = new ArrayList<Requests>();
		Requests r;
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			String sql = "select * from Requests where REQUESTER = ?";
			PreparedStatement ps = connect.prepareStatement(sql);
			ps.setInt(1, id);
			
			ResultSet info = ps.executeQuery();
			
			while(info.next())
			{
				r = new Requests();
				
				r.setRequestId(info.getInt(1));

				RequestType t = getType(info.getInt(2));
				r.setType(t);
				
				r.setAmount(info.getDouble(3));
				r.setPurpose(info.getString(4));
				r.setRequested(info.getDate(5));
				r.setResolved(info.getDate(6));
				r.setReqester(info.getInt(7));
				r.setResolver(info.getInt(8));
				r.setNote(info.getString(9));
					
				reqs.add(r);
			}
			
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return reqs;
		
	}
	
	//gets all requests that are in database for managers
	public ArrayList<Requests> getAllR()
	{
		ArrayList<Requests> reqs = new ArrayList<Requests>();
		Requests r;
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			String sql = "select * from Requests";
			PreparedStatement ps = connect.prepareStatement(sql);
			
			ResultSet info = ps.executeQuery();
			
			while(info.next())
			{
				r = new Requests();
				
				r.setRequestId(info.getInt(1));

				RequestType t = getType(info.getInt(2));
				r.setType(t);
				
				r.setAmount(info.getDouble(3));
				r.setPurpose(info.getString(4));
				r.setRequested(info.getDate(5));
				r.setResolved(info.getDate(6));
				r.setReqester(info.getInt(7));
				r.setResolver(info.getInt(8));
				r.setNote(info.getString(9));
					
				reqs.add(r);
			}
			
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return reqs;
		
	}

	//gets request type data and returns pojo RequestType to be stored in a request
	public RequestType getType (int i)
	{
		RequestType temp = new RequestType();
		
		try(Connection connect = ConnectionFactory.getInstance().getConnection();)
		{
			String sql = "select * from stateType where STATEID = ?";
			PreparedStatement ps = connect.prepareStatement(sql);
			ps.setInt(1, i);
			
			ResultSet info = ps.executeQuery();
			
			while(info.next())
			{
				
				temp.setTypeId(info.getInt(1));
				temp.setName(info.getString(2));
				
			}
			
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return temp;
	}


}
