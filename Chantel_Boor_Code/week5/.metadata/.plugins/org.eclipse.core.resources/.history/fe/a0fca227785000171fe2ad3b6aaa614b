package com.ex.pojos;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;


@Entity
@Table(name = "BEAR")
public class Bear 
{
	
	@Id
	@Column (name="B_ID")
	@SequenceGenerator(name="BEARID_SEQ",sequenceName="BEARID_SEQ")
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="BEARID_SEQ")
	private int id;
	
	@Column 
	private String bearColor;
	
	@Column 
	private String breed;
	
	@Column 
	private double height;
	
	@Column 
	private double wieght;
	
	@ManyToOne(fetch=FetchType.LAZY,cascade=CascadeType.ALL)
	@JoinColumn(name="BEAR_HOME")
	private Cave dwelling;
	
	/*
	 * A fetching stratagy (Lazy or eager) is the startagey that hibernate will
	 * use for retrieving associated objects if the app needs to navigate the
	 * association. 
	 */
	
	@OneToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="HONEYPOT_ID")
	private HoneyPot honeyPot;
	
	@ManyToMany(fetch=FetchType.LAZY)
	@JoinTable(name="PARENT_CUB",
				joinColumns = @JoinColumn(name = "PARENT_ID"),
				inverseJoinColumns=@JoinColumn(name = "CUB_ID"))
	private Set<Bear> bearChild;
	
	
	
	public Bear() {
		super();
	}



	public Bear(int id, String bearColor, String breed, double height, double wieght, Cave dwelling, HoneyPot honeyPot,
			Set<Bear> bearChild) {
		super();
		this.id = id;
		this.bearColor = bearColor;
		this.breed = breed;
		this.height = height;
		this.wieght = wieght;
		this.dwelling = dwelling;
		this.honeyPot = honeyPot;
		this.bearChild = bearChild;
	}



	public Bear(String bearColor, String breed, double height, double wieght, Cave dwelling, HoneyPot honeyPot,
			Set<Bear> bearChild) {
		super();
		this.bearColor = bearColor;
		this.breed = breed;
		this.height = height;
		this.wieght = wieght;
		this.dwelling = dwelling;
		this.honeyPot = honeyPot;
		this.bearChild = bearChild;
	}



	public int getId() {
		return id;
	}



	public void setId(int id) {
		this.id = id;
	}



	public String getBearColor() {
		return bearColor;
	}



	public void setBearColor(String bearColor) {
		this.bearColor = bearColor;
	}



	public String getBreed() {
		return breed;
	}



	public void setBreed(String breed) {
		this.breed = breed;
	}



	public double getHeight() {
		return height;
	}



	public void setHeight(double height) {
		this.height = height;
	}



	public double getWieght() {
		return wieght;
	}



	public void setWieght(double wieght) {
		this.wieght = wieght;
	}



	public Cave getDwelling() {
		return dwelling;
	}



	public void setDwelling(Cave dwelling) {
		this.dwelling = dwelling;
	}



	public HoneyPot getHoneyPot() {
		return honeyPot;
	}



	public void setHoneyPot(HoneyPot honeyPot) {
		this.honeyPot = honeyPot;
	}



	public Set<Bear> getBearChild() {
		return bearChild;
	}



	public void setBearChild(Set<Bear> bearChild) {
		this.bearChild = bearChild;
	}



	@Override
	public String toString() {
		return "Bear [id=" + id + ", bearColor=" + bearColor + ", breed=" + breed + ", height=" + height + ", wieght="
				+ wieght + ", dwelling=" + dwelling + ", honeyPot=" + honeyPot + ", bearChild=" + bearChild + "]";
	}
	
	
	
	
}
