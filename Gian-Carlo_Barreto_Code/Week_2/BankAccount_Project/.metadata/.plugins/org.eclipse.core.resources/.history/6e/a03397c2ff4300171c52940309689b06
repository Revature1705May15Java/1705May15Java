package com.bank.main;

import java.util.ArrayList;
import java.util.Scanner;

import com.bank.pojos.Account;
import com.bank.pojos.User;
import com.bank.service.BankService;

public class BankClient {
	private int userId;
	private User user;
	private Scanner in;
	private static final int EXIT = -1;
	private static final int LOGOUT = -2;
	private BankService service;
	
	BankClient() {
		this.in = new Scanner(System.in);
		this.service = new BankService();
	}
	
	/**
	 * Displays the welcome screen
	 * @return number of menu options
	 */
	private int displayWelcomeScreen() {
		System.out.println("Welcome to The Bank...");
		System.out.println("What would you like to do? Please choose from the menu below: ");
		System.out.println("1. Login");
		System.out.println("2. Create a new user");
		System.out.println("3. Exit");
		return 3;
	}
	
	/**
	 * Displays the main menu
	 * @return number of menu options
	 */
	private int displayMainMenu() {
		System.out.println("\nPlease select a choice from the menu below: ");
		System.out.println("1. Create an account");
		System.out.println("2. Add a user to an account");
		System.out.println("3. View your account balance");
		System.out.println("4. Withdraw");
		System.out.println("5. Deposit");
		System.out.println("6. Transfer an amount to another account");
		System.out.println("7. Close an account");
		System.out.println("8. Sign out");
		return 8;
	}
	
	/**
	 * Gets the user's menu choice
	 * @return user's menu choice
	 */
	private int getUserChoice(int numOfOptions) {
		int choice = Integer.parseInt(this.in.nextLine());
		while (choice < 1 || choice > numOfOptions) {
			System.out.println("Choice not valid.  Please enter valid choice");
			choice = Integer.parseInt(this.in.next());
		}
		return choice;
	}
	
	/**
	 * Executes the user's window menu choice
	 * @param choice
	 * @return EXIT if user wants to exit program, 0 otherwise
	 */
	private int executeWelcomeChoice(int choice) {
		switch (choice) {
			case 1: 
				login();
				boolean done = false;
				while (!done) {
					int numOfOptions = displayMainMenu();
					int mainChoice = getUserChoice(numOfOptions);
					int signout = executeMainChoice(mainChoice);
					if (signout == LOGOUT) 
						done = true;
				}
				break;
			case 2:
				createNewUser();
				break;
			case 3:
				return EXIT;
		}
		return 0;
	}
	
	/**
	 * Ask the user for their username and password and then log them into
	 * the system.
	 */
	private void login() {
		String username = "";
		String password = "";
		boolean valid = false;
		while (!valid) {
			System.out.print("Please enter your username: ");
			username = this.in.nextLine();
			System.out.print("Please enter your password: ");
			password = this.in.nextLine();
			User u = this.service.confirmLogin(username, password);
			if (u == null)
				System.out.println("Your login credentials are incorrect");
			else {
				this.userId = u.getId();
				this.user = u;
				setAccountInfo();
				valid = true;
			}
		}
	}
	
	/**
	 * Asks the user for new user information and sends the new user request to the BankService
	 * class.
	 */
	private void createNewUser() {
		String firstName, lastName, username = null, password, email = null;
		System.out.print("\nPlease enter your first name: ");
		firstName = this.in.nextLine();
		System.out.print("Please enter your last name: ");
		lastName = this.in.nextLine();
		boolean available = false;
		while (!available) {
			System.out.print("Please enter a username: ");
			username = this.in.nextLine();
			available = service.isUsernameAvailable(username);
			if (!available)
				System.out.println("Username not available");
		}
		System.out.print("Please enter a password: ");
		password = this.in.nextLine();
		available = false;
		while (!available) {
			System.out.print("Please enter an email: ");
			email = this.in.nextLine();
			available = service.isEmailAvailable(email);
			if (!available)
				System.out.println("Email not available");
		}
		User user = this.service.createNewUser(firstName, lastName, username, password, email);
		System.out.println(user);
	}
	
	/**
	 * Sets the user's account info.
	 */
	private void setAccountInfo() {
		ArrayList<Account> accounts = this.service.getAllAccounts(this.userId);
		for (Account a : accounts) {
			this.user.addAccount(a);
		}
	}
	
	/**
	 * Executes the user's main menu choice
	 * @param choice
	 * @return LOGOUT if user wants to logout, 0 otherwise
	 */
	private int executeMainChoice(int choice) {
		switch(choice) {
			case 1:
				// Create an account
				createAccount();
				break;
			case 2:
				// Add user to an account
				break;
			case 3:
				// View account balance
				break;
			case 4:
				// Withdraw
				break;
			case 5:
				// Deposit
				break;
			case 6:
				// Transfer
				break;
			case 7:
				// Close an account
				break;
			case 8:
				// Sign out
				this.userId = 0;
				return LOGOUT;
		}
		return 0;
	}
	
	private void createAccount() {
		if (this.user.getNumOfAccounts() < 3) {
			System.out.println("What type of account would you like to create: ");
			System.out.println("1. Checking");
			System.out.println("2. Savings");
			System.out.println("3. Credit");
			int type = getUserChoice(3);
			Account a = this.service.createAccount(this.userId, type);
			if (a != null) {
				System.out.println("Account successfully created");
				this.user.addAccount(a);
			}
			else
				System.out.println("Account not created");
		}
		else
			System.out.println("You have exceeding the alloted amount of accounts");
	}
	
	/**
	 * Runs the Online Banking Program
	 */
	public void run() {
		while (true) {
			int numOfOptions = displayWelcomeScreen();
			int choice = getUserChoice(numOfOptions);
			int shouldExit = executeWelcomeChoice(choice);
			if (shouldExit == EXIT)
				break;
		}
	}
}
