doctype html
html
    head
        meta(charset='utf-8')
        meta(http-equiv='X-UA-Compatible', content='IE=edge')
        meta(name='viewport', content='width=device-width, initial-scale=1')

        title Bank &middot; Revature

        link(rel='stylesheet', href='./lib/bootstrap/bootstrap.min.css')
        link(rel='stylesheet', type='text/css', href='http://fonts.googleapis.com/css?family=Poppins')
        link(rel='stylesheet', type='text/css', href='http://fonts.googleapis.com/css?family=Montserrat:400,700')
        link(rel='apple-touch-icon', href='./img/favicon.png')
        link(rel='stylesheet', href='./css/bank.css')
    body
        header#top.jumbotron.container-fluid
            h2 BANK &middot; REVATURE &nbsp;&nbsp;
                small Richard Marquez [<a href="https://github.com/Revature1705May15Java/1705May15Java/tree/Richard_Marquez/Richard_Marquez_Code/Bank/src/com/bank">1705May15Java</a>]

        nav
            ul
                a(href='#top')
                    li Top
                a(href='#userStories')
                    li User Stories
                a(href='#specialFeatures')
                    li Features
                a(href='#ERD')
                    li ERD
                a(href='#SQLSnippets')
                    li SQL
                a(href='#patterns')
                    li Patterns
                a(href='#tools')
                    li Tools

        main
            section#main-desc
                video(muted, loop, autoplay, poster='./img/puppersnap.png')
                    source(src='./img/pupper.mp4')
                div#desc
                    h4 A console-based banking application
                    p
                        | Need fake money? Need it fast? Use our fake bank!
                        | Create an account with unverified information;
                        | deposit money that's not real;
                        | have an infinite credit limit;
                        | best of all: You can share these accounts with your friends!

            section#userStories.container-fluid
                div#storyContainer.container-fluid
                    //h3 User Stories
                    div.row.matchedCols
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-user
                                | Create User
                            p
                                | Prompts the user for their first name, last name, email address
                                | and password. New user must register with a unique email address.
                                | A confirmation email is sent to user on successful registration
                                | (see Emails below).
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-log-in
                                | Log In/Out
                            p
                                | Prompts the user for their email address and password. User
                                | with given email must exist in system. Password must match the hashed
                                | password stored in the database (see Password Hashing below).
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-piggy-bank
                                | Create Account
                            p
                                | Once logged into the system, a user may create up to six accounts.
                                | Account may be one of the following types: Checking, Savings, Credit.
                    div.row.matchedCols
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-usd
                                | Check Balance
                            p
                                | Once the user chooses an account to manage they may check the balance
                                | of that account. Drawn credit appears as a negative balance.
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-plus
                                | Deposit
                            p
                                | User may deposit a given amount into the account. If it is a credit account
                                | the user may not deposit if balance will exceed $0.00
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-minus
                                | Withdraw
                            p
                                | User may withdraw a given amount from the account. If it is not a credit account
                                | user may not withdraw if balance will go below $0.00. Credit accounts
                                | have no limit.
                    div.row.matchedCols
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-transfer
                                | Transfer Funds
                            p
                                | User may transfer funds to another account. Account # must be known, and
                                | there must be a sufficient balance for the transaction. User
                                | may not transfer to/from a credit account.
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-paperclip
                                | Joint Accounts
                            p
                                | User may add/remove another account holder to/from the account by
                                | email address. An account may
                                | have up to four simultaneous holders. New holder must already
                                | exist in the system.
                        div.col-xs-4
                            h4
                                span.glyphicon.glyphicon-remove
                                | Close Account
                            p
                                | User may close an account that has a $0.00 balance. This account may no
                                | longer be managed from the front-end, but will still exist in the database.
                                | For eternity.

            section#specialFeatures.container-fluid
                h3 Special Features
                div.row
                    div.col-xs-3.col-xs-offset-1
                        div.panel.panel-primary
                            div.panel-heading
                                span Password Hashing
                            div.panel-body
                                p
                                    | When a user first creates his account the password is hashed before it
                                    | is stored in the database. The Java code uses the <a href="https://github.com/defuse/password-hashing">
                                    | PBKDF2 algorithm (including salt)</a> to securely hash the password.
                                p
                                    | When the user attempts to log in he enters a password which is then
                                    | hashed using the same algorithm and compared to the password stored
                                    | in the database.
                    div.col-xs-4
                        div.panel.panel-success
                            div.panel-heading
                                span Emails
                            div.panel-body
                                p
                                    | When a user successfully registers with the bank an email is sent
                                    | to the address entered during registration as confirmation.
                                p
                                    | The email is sent from 1705May15Java@gmail.com via the Gmail SMTP
                                    | servers. Most of the code, including the necessary .jars, to implement
                                    | this functionality can be found
                                    | <a href="https://www.javatpoint.com/example-of-sending-email-using-java-mail-api">
                                    | here</a>.
                    div.col-xs-3
                        div.panel.panel-info
                            div.panel-heading
                                span Logging
                            div.panel-body
                                p
                                    | Any attempt to access the database is logged into log.txt in the com.bank.logs
                                    | package. This includes successful as well as failed attempts.
                                p
                                    | Logging is currently implemented using a custom logger class with static methods.
                                    | Future development will make use of log4j instead of this custom class.

            section#ERD
                h3 Entity-Relationship Diagram
                img(src='./img/erd.png', alt='ERD')

            section#SQLSnippets.container-fluid
                h3 SQL Snippets
                div.row
                    div.col-xs-3.col-xs-offset-2
                        h4 Statement
                    div.col-xs-5
                        div.well
                            pre SELECT * FROM AccountType

                div.row
                    div.col-xs-3.col-xs-offset-2
                        h4 PreparedStatement
                    div.col-xs-5
                        div.well
                            pre INSERT INTO banker(fName, lName, password, email) VALUES(?, ?, ?, ?)
                            pre UPDATE banker SET fName=?, lName=?, password=?, email=? WHERE userId=?
                            pre DELETE FROM bankerAccount WHERE userId=? AND accountId=?
                div.row
                    div.col-xs-3.col-xs-offset-2
                        h4 CallableStatement
                    div.col-xs-5
                        div.well
                            pre { ? = CALL getNumAccounts(?) }
                            pre
                                | CREATE OR REPLACE FUNCTION getNumAccounts(uId IN NUMBER)
                                |     RETURN NUMBER
                                | IS
                                |     numAccounts NUMBER;
                                |     BEGIN
                                |         SELECT count(*)
                                |         INTO numAccounts
                                |         FROM account
                                |         WHERE accountId IN
                                |         (SELECT accountId
                                |             FROM bankerAccount
                                |             WHERE userId = uId)
                                |         AND closed IS NULL;
                                |         RETURN numAccounts;
                                |     END;

            section#patterns
                h3 Design Patterns
                div#patternDesc
                    p
                        | This application makes extensive use of the Data Access Object (DAO) design pattern.
                        | The DAO is represented by the Dao.java interface and implemented by DaoImpl.java.
                        | Service.java acts as the service layer which contains the business logic that is, in turn,
                        | needed by View.java which is the console-based front-end.
                    p
                        | In addition, the Singleton and Factory patterns are made use of in ConnectionFactory.java
                        | to serve as a single access point for acquiring a connection to the database.

            section#tools
                h3 Tools
                div
                    a(href='http://java.com')
                        img(src='./img/tech_logos/java.jpg')
                    a(href='http://www.oracle.com/database/')
                        img(src='./img/tech_logos/oracle.png')
                    a(href='https://jquery.com')
                        img(src='./img/tech_logos/jquery.png')
                    a(href='http://github.com')
                        img(src='./img/tech_logos/github.png')
                    a(href='https://pugjs.org')
                        img(src='./img/tech_logos/jade.png')
                    a(href='http://sass-lang.com')
                        img(src='./img/tech_logos/sass.png')
                    a(href='http://getbootstrap.com')
                        img(src='./img/tech_logos/bootstrap.png')



        script(src='./lib/jquery.min.js')
        script(src='./lib/bootstrap/bootstrap.min.js')
        script(src='./js/bank.js')