-- Part 1.2.1  SELECT
SELECT *
FROM EMPLOYEE; 

SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King'; 

SELECT *
FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL; 
/
-- Part 1.2.2 ORDER BY
SELECT TITLE
FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM CUSTOMER 
ORDER BY CITY;
/
-- Part 1.2.3
INSERT INTO GENRE 
VALUES (26, 'Vaporwave'); 
INSERT INTO GENRE 
VALUES (27, 'Lo Fi'); 
/
INSERT INTO EMPLOYEE 
VALUES (9, 'Ployee', 'Em', 'IT Staff', 1, '01-JAN-60', '04-MAR-04', '1 Some Street', 'Lethbridge', 'AB', 'Canada', 'T1H 1Y8', '+1 (111) 111-1111', '+1 (111) 111-1111', 'em@email.com'); 
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (10, 'One', 'Some'); 
/
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES (60, 'Custo', 'Mer', 'customer@email.com'); 
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES(61, 'Mona', 'Lisa', 'ml@email.com'); 
/
-- Part 1.2.4
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell'; 
/
UPDATE ARTIST 
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival'; 
/
-- Part 1.2.5
SELECT * 
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
/
-- Part 1.2.6
SELECT *
FROM INVOICE 
WHERE TOTAL BETWEEN 15 AND 50; 
/
SELECT * 
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04'; 
/
-- Part 1.2.7 
ALTER TABLE CUSTOMER 
DISABLE CONSTRAINT FK_CUSTOMERSUPPORTREPID;

ALTER TABLE EMPLOYEE
DISABLE CONSTRAINT FK_EMPLOYEEREPORTSTO;

ALTER TABLE EMPLOYEE
DISABLE CONSTRAINT PK_EMPLOYEE; 

ALTER TABLE INVOICE 
DISABLE CONSTRAINT FK_INVOICECUSTOMERID; 

DECLARE CID NUMBER; --????????

SELECT CUSTOMERID INTO CID FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'; 

DELETE FROM INVOICE
WHERE CUSTOMERID = CID;

DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'; 

ALTER TABLE CUSTOMER
ENABLE CONSTRAINT FK_CUSTOMERSUPPORTREPID; 

ALTER TABLE EMPLOYEE
ENABLE CONSTRAINT PK_EMPLOYEE; 

ALTER TABLE INVOICE 
ENABLE CONSTRAINT FK_INVOICECUSTOMERID; 
/
-- Part 1.3.1
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN DATE IS 
THETIME DATE; 
BEGIN
SELECT CURRENT_DATE INTO THETIME FROM DUAL; 
RETURN THETIME;
END; 

CREATE OR REPLACE FUNCTION MEDIATYPE_LENGTH(TYPE IN NUMBER)
RETURN NUMBER IS 
LENGTH NUMBER; 
BEGIN 
SELECT LENGTH(NAME) INTO LENGTH 
FROM MEDIATYPE
WHERE MEDIATYPEID = TYPE;
RETURN LENGTH;
END; 
/
-- Part 1.3.2
CREATE OR REPLACE FUNCTION INVOICE_AVG
RETURN NUMBER IS 
AVERAGE NUMBER; 
BEGIN 
SELECT AVG(TOTAL) INTO AVERAGE
FROM INVOICE; 
RETURN AVERAGE; 
END; 

CREATE OR REPLACE FUNCTION MOST_EXP
RETURN NUMBER IS 
EXP_TRACK NUMBER; 
BEGIN
SELECT MAX(UNITPRICE) INTO EXP_TRACK
FROM TRACK;
RETURN EXP_TRACK; 
END; 
/
-- Part 1.3.3
CREATE OR REPLACE FUNCTION AVG_INVOICELINES
RETURN NUMBER AS
AVERAGE NUMBER;
BEGIN
SELECT AVG(UNITPRICE) INTO AVERAGE
FROM INVOICELINE;
RETURN AVERAGE;
END;
/
-- Part 1.3.4
-- https://www.devart.com/dotconnect/oracle/docs/Table-Valued-Functions.html
-- http://www.adp-gmbh.ch/ora/plsql/coll/return_table.html
CREATE OR REPLACE FUNCTION EMPLOYEES_AFTER_1968
RETURN;  
; 
BEGIN
SELECT * INTO 
FROM EMPLOYEE
WHERE DATEPART(YY, BIRTHDATE) > 1968; 
END;
/
-- Part 1.4.1
CREATE OR REPLACE PROCEDURE EMPLOYEE_NAMES(NAMES OUT SYS_REFCURSOR)
IS
BEGIN 
OPEN NAMES FOR 
SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE; 
END; 
/
-- Part 1.4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(ID IN NUMBER, NEW_FNAME IN VARCHAR2, NEW_LNAME IN VARCHAR2)
IS 
BEGIN
UPDATE EMPLOYEE
SET FIRSTNAME = NEW_FNAME, LASTNAME = NEW_LNAME
WHERE EMPLOYEEID = ID; 
END; 

CREATE OR REPLACE PROCEDURE GET_MANAGER(ID IN NUMBER, MANAGER OUT SYS_REFCURSOR)
IS
BEGIN
OPEN MANAGER FOR 
SELECT * FROM EMPLOYEE WHERE EMPLOYEEID = ID; 
END; 
/
-- Part 1.4.3
CREATE OR REPLACE PROCEDURE GET_CUSTOMER(ID IN NUMBER, CUST_INFO OUT SYS_REFCURSOR)
IS
BEGIN 
OPEN CUST_INFO FOR 
SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER
WHERE CUSTOMERID = ID; 
END; 
/
-- Part 1.5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(ID IN NUMBER)
IS
BEGIN 
BEGIN TRANSACTION 
SAVEPOINT A; 

ALTER TABLE INVOICELINE
DISABLE CONSTRAINT FK_INVOICELINEINVOICEID; 

ALTER TABLE INVOICE 
DISABLE CONSTRAINT FK_INVOICECUSTOMERID;

SAVEPOINT B; 

DELETE INVOICE FROM INVOICE 
WHERE INVOICEID = ID; 

SAVEPOINT C; 

ALTER TABLE INVOICELINE 
ENABLE CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICE 
ENABLE CONSTRAINT FK_INVOICECUSTOMERID;

COMMIT TRANSACTION; 
END; 
/
 --   (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(ID IN NUMBER, FNAME IN VARCHAR2, LNAME IN VARCHAR2, CO IN VARCHAR2, ADDR IN VARCHAR2, CTY IN VARCHAR2, ST IN VARCHAR2, CNTRY IN VARCHAR2, ZIPCODE IN VARCHAR2, PHONENUM IN VARCHAR2, FAXNUM IN VARCHAR2, EMAILADD IN VARCHAR2, SUPPID IN NUMBER)
IS 
BEGIN 
BEGIN TRANSACTION
SAVEPOINT; 
INSERT INTO CUSTOMER VALUES(ID, FNAME, LNAME, CO, ADDR, CTY, ST, CNTRY ZIPCODE, PHONENUM, FAXNUM, EMAILADD, SUPPID); 
COMMIT TRANSACTION; 
END; 
/
--  Part 1.6.1
CREATE OR REPLACE TRIGGER REC_ADD_TRIGGER
AFTER INSERT ON EMPLOYEE
BEGIN 
DBMS_OUTPUT.PUT_LINE('New employee record added'); 
END; 

CREATE OR REPLACE TRIGGER REC_UPDATE_TRIGGER
AFTER UPDATE ON EMPLOYEE
BEGIN 
DBMS_OUTPUT.PUT_LINE('Employee record updated');
END; 

CREATE OR REPLACE TRIGGER REC_DELETE_TRIGGER
AFTER DELETE ON EMPLOYEE
BEGIN
DBMS_OUTPUT.PUT_LINE('Employee record deleted'); 
END; 
/
-- Part 1.6.2
CREATE VIEW INVOICE_VIEW AS
SELECT * FROM INVOICE
WHERE TOTAL > 50; 

CREATE OR REPLACE TRIGGER DEL_INVOICE
INSTEAD OF DELETE ON INVOICE_VIEW
BEGIN
DELETE FROM INVOICE
WHERE TOTAL > 50;
END; 
/
-- Part 1.7.1
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME
FROM INVOICE
INNER JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID; 
/
-- Part 1.7.2
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID; 
/ 
-- Part 1.7.3 
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID; 
/
-- Part 1.7.4
SELECT *
FROM ARTIST
CROSS JOIN ALBUM 
ORDER BY ARTIST.NAME; 
/
-- Part 1.7.5
SELECT A.FIRSTNAME, A.LASTNAME, B.FIRSTNAME, B.LASTNAME, A.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B 
WHERE A.EMPLOYEEID <> B.EMPLOYEEID
AND A.REPORTSTO = B.REPORTSTO; 
/
-- Part 1.8.1
CREATE CLUSTER ARTIST_CLUSTER(ARTIST.NAME); -- ???

CREATE INDEX ARTIST_INDEX ON CLUSTER ARTIST_CLUSTER;
/