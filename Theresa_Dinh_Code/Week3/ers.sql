CREATE DATABASE ersdb; 
/
CREATE USER ersadmin
IDENTIFIED BY admin; 
/
GRANT CONNECT TO ersadmin;
GRANT RESOURCE TO ersadmin; 
/
CREATE TABLE EMPLOYEE
(
    EMAIL VARCHAR2(40) UNIQUE NOT NULL, 
    PASSWORD VARCHAR2(40) NOT NULL, 
    ID NUMBER, 
    FIRSTNAME VARCHAR2(40) NOT NULL, 
    LASTNAME VARCHAR2(40) NOT NULL, 
    ISMANAGER NUMBER DEFAULT 0, -- 0 for false, 1 for true 
    CONSTRAINT PK_EMPLOYEEID PRIMARY KEY (ID) 
); 
/
CREATE TABLE REQUEST
(
    STATUSID NUMBER DEFAULT 0, 
    REQUESTDATE DATE, 
    RESOLVEDATE DATE, 
    AMOUNTREQUESTED NUMBER(12,2), 
    PURPOSE VARCHAR2(40), 
    REQUESTID NUMBER, 
    REQUESTERID NUMBER NOT NULL, 
    APPROVERID NUMBER,
    CHECK (AMOUNTREQUESTED > 0.00),
    CONSTRAINT PK_REQUESTID PRIMARY KEY (REQUESTID),
    CONSTRAINT FK_REQUESTERID FOREIGN KEY (REQUESTERID) REFERENCES EMPLOYEE (ID), 
    CONSTRAINT FK_APPROVERID FOREIGN KEY (APPROVERID) REFERENCES EMPLOYEE (ID) -- POTENTIALLY TROUBLESOME? 
);
/
CREATE TABLE STATUSTYPE
(
    STATUSID NUMBER, 
    STATUSNAME VARCHAR2(40) UNIQUE NOT NULL,
    CONSTRAINT PK_STATUSID PRIMARY KEY (STATUSID)
); 
/ 
ALTER TABLE EMPLOYEE 
MODIFY (ISMANAGER NOT NULL); 
/
-- LOOKUP TABLE SETUP
INSERT INTO STATUSTYPE VALUES(0, 'PENDING'); 
INSERT INTO STATUSTYPE VALUES(1, 'APPROVED'); 
INSERT INTO STATUSTYPE VALUES(2, 'DENIED'); 
SELECT * FROM STATUSTYPE; 
/
-- MAKE ID SEQUENCES 
CREATE SEQUENCE EMPLOYEEID_SEQ
START WITH 1
INCREMENT BY 1; 
/
CREATE SEQUENCE REQUESTID_SEQ
START WITH 1
INCREMENT BY 1; 
/
-- MAKE ID TRIGGERS 
CREATE OR REPLACE TRIGGER EMPLOYEESEQ_TRIGGER
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW 
BEGIN 
IF :NEW.ID IS NULL THEN 
SELECT EMPLOYEEID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; 
END IF; 
END; 
/
CREATE OR REPLACE TRIGGER REQUESTSEQ_TRIGGER
BEFORE INSERT ON REQUEST
FOR EACH ROW 
BEGIN
IF :NEW.REQUESTID IS NULL THEN 
SELECT REQUESTID_SEQ.NEXTVAL INTO :NEW.REQUESTID FROM DUAL; 
END IF; 
END; 
/
-- MAKE DATE TRIGGERS
CREATE OR REPLACE TRIGGER CURRENTDATE_TRIGGER
BEFORE INSERT ON REQUEST
FOR EACH ROW
BEGIN 
IF :NEW.REQUESTDATE IS NULL THEN 
SELECT SYSDATE INTO :NEW.REQUESTDATE FROM DUAL; 
END IF; 
END;
/
-- MAKE RESOLVE DATE TRIGGER
CREATE OR REPLACE TRIGGER RESOLVEDATE_TRIGGER
BEFORE UPDATE ON REQUEST
FOR EACH ROW 
BEGIN 
IF :NEW.RESOLVEDATE IS NULL THEN 
SELECT SYSDATE INTO :NEW.RESOLVEDATE FROM DUAL;
END IF; 
END; 
/
COMMIT; 
/
INSERT INTO EMPLOYEE (EMAIL, PASSWORD, FIRSTNAME, LASTNAME) VALUES('test@email.com', 'test', 'test', 'test'); 
/
INSERT INTO REQUEST (AMOUNTREQUESTED, REQUESTERID) VALUES (1.00, 1); 
/
INSERT INTO EMPLOYEE (EMAIL, PASSWORD, FIRSTNAME, LASTNAME, ISMANAGER) VALUES ('manager@email.com', 'test', 'manager', 'manager', 1); 
/
COMMIT; 
/