package com.google.challenges;

public class Answer {
	
	public static int[][] solutionsArray=new int[21][21];
	public static void startSolutionsArray(){//sets up solutions for easier solution building
		for(int i=0;i<solutionsArray.length;i++){
			solutionsArray[0][i]=1;
			solutionsArray[1][i]=1;
		}
		for(int i=0;i<solutionsArray.length;i++){
			solutionsArray[i][2]=(Math.floorDiv(i/2,1)+1);			
		}
		for(int i=0;i<solutionsArray.length;i++){
			////solve for the third level destacks
		}
	}
	public static int maxSimpleDestack(int num){//returns the amount of simple destacks possible for a given stack
		if(num%2==0){
			return num/2;
		}
		else{
			return Math.floorDiv(num, 2);
		}
	}
	public static int maxDestack(int num, int length){//returns the maximum total amount of destacks possible on a given stack
		double num2=(double)num;
		double length2=(double)length;
		return (int)Math.floor(((length2-1)/length2)*num2);
	}
	public static int numCDs(int num,int length){//returns number of complex destacks a stack needs to solve
		int mds=maxDestack(num,length);
		int msds=maxSimpleDestack(num);
		int numcds=mds-msds;
		return numcds;
	}
	public static int solveSimpleDestack(int num, int length){
		System.out.println("solving size"+num+", length"+length);
		int numOfSolutions=solutionsArray[num][length];
		return numOfSolutions;
	}
	public static int solveFullSimpleDestack(int num, int length){
		int maxSimpleDestack=maxSimpleDestack(num);
		System.out.println(maxSimpleDestack);
		int numOfSolutions=0;
		for(int i =0;i<maxSimpleDestack+1;i++){
			numOfSolutions=numOfSolutions+solveSimpleDestack(10,length-1);
		}
		return numOfSolutions;
	}
	
	public static void main(String[] args) {
		startSolutionsArray();
		System.out.println(solveFullSimpleDestack(4,3));

	}

}
