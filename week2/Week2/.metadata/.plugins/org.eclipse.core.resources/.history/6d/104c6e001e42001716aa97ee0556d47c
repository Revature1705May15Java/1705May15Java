package com.google.challenges;

public class Answer {
	
	public static int[][] solutionsArray=new int[21][21];
	public static void startSolutionsArray(){//sets up solutions for easier solution building
		for(int i=0;i<solutionsArray.length;i++){
			solutionsArray[0][i]=1;
			solutionsArray[1][i]=1;
		}
		for(int i=0;i<solutionsArray.length;i++){
			solutionsArray[i][2]=(Math.floorDiv(i/2,1)+1);			
		}
		for(int i=0;i<solutionsArray.length;i++){
			////solve for the third level destacks
		}
	}
	public static int maxSimpleDestack(int num){//returns the amount of simple destacks possible for a given stack
		if(num%2==0){
			return num/2;
		}
		else{
			return Math.floorDiv(num, 2);
		}
	}
	public static int maxDestack(int num, int length){//returns the maximum total amount of destacks possible on a given stack
		double num2=(double)num;
		double length2=(double)length;
		return (int)Math.floor(((length2-1)/length2)*num2);
	}
	public static int numCDs(int num,int length){//returns number of complex destacks a stack needs to solve
		int mds=maxDestack(num,length);
		int msds=maxSimpleDestack(num);
		int numcds=mds-msds;
		return numcds;
	}
	public static int solveSimpleDestack(int num, int length){
		System.out.println("solving size"+num+", length"+length);
		int numOfSolutions=solutionsArray[num][length];
		System.out.println("number of solutions is "+numOfSolutions +" for "+num+" "+length);
		return numOfSolutions;
	}
	public static int solveFullSimpleDestack(int num, int length){
		int maxSimpleDestack=maxSimpleDestack(num);
		System.out.println(maxSimpleDestack);
		int numOfSolutions=0;
		for(int i =0;i<maxSimpleDestack+1;i++){
			numOfSolutions=numOfSolutions+solveSimpleDestack(i,length-1);
		}
		return numOfSolutions;
	}
//	//takes the stackSize of the Destack which needs to be solved, returns the number of solutions for that stackSize
	public static int singleDestackComplex(int originalStackSize,int currentStackSize, int length){
		int[] stackSpace=new int[length];
		stackSpace[0]=currentStackSize;
		int numberOffStacked=originalStackSize-currentStackSize;
		int i=1;
		while(numberOffStacked>0){
			if(stackSpace[i]<stackSpace[i-1]){
					stackSpace[i]++;
					numberOffStacked--;
			}else{
				i++;
			}
		}//after this while loop the destack is complete
		for(int j=0;j<stackSpace.length;j++){
			System.out.println("stackspace"+j+": "+stackSpace[j]);
		}
		int[] isoStack=findIsomorphicDestack(stackSpace);
		int numSolutions=1;
		int isoStackAdded=0;
		if(isoStack[1]>0){
			for(int k=0;k<isoStack.length;k++){
				isoStackAdded=isoStackAdded+isoStack[k];
			}
			System.out.println("isostack block size: "+isoStackAdded+"isostac[0]: "+isoStack[0]+"isoStack.length: "+isoStack.length+" for recursive call");
			numSolutions=numSolutions+singleDestackComplex(isoStackAdded,isoStack[0],isoStack.length);
		}else{
			numSolutions=numSolutions+solveSimpleDestack(isoStack[isoStack.length-2],2);
		}
		return numSolutions;
	}
	
	public static int[] findIsomorphicDestack(int[] complexDestack){
	int[] destackedSpace=new int[complexDestack.length-1];
	int lowestDestackHeight=complexDestack[complexDestack.length-1];
	System.out.println("height subtracted is "+lowestDestackHeight);
	for(int i=0;i<complexDestack.length;i++){
		System.out.println(complexDestack[i]+" complex "+i);
	}
	for(int i=0;i<destackedSpace.length;i++){
		destackedSpace[i]=complexDestack[i+1]-lowestDestackHeight;
		System.out.println(destackedSpace[i]+" iso"+i);
	}
	
	return destackedSpace;//this returns the isomorphic destack
	
}
	
	public static void main(String[] args) {
		startSolutionsArray();
		System.out.println(singleDestackComplex(20,7,4));

	}

}
