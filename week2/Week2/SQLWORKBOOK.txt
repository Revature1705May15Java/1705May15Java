--------------------SQL WORKBOOK
-------2.0
--2.1
/
SELECT * FROM EMPLOYEE
/
SELECT * 
FROM EMPLOYEE 
WHERE LOWER(LASTNAME) LIKE LOWER('KING');
/
SELECT *
FROM EMPLOYEE
WHERE LOWER(EMPLOYEE.FIRSTNAME) LIKE LOWER('ANDREW') AND
EMPLOYEE.REPORTSTO IS NULL;
/
--2.2
SELECT * 
FROM ALBUM 
ORDER BY TITLE ASC
/
SELECT CUSTOMER.FIRSTNAME
FROM CUSTOMER
ORDER BY CUSTOMER.CITY ASC
/
--2.3
--INSERT TWO GENRES INTO THE GENRES TABLE
INSERT INTO GENRE(GENREID,NAME)
VALUES(50,'Folk Rock')
/
INSERT INTO GENRE(GENREID,NAME)
VALUES(51,'Soft Rock')
/
--INSERT TWO NEW RECORDS INTO EMPLOYEE TABLE
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(9,'Dimmadome','Doug','Owner',NULL,'17-APR-1973','1-FEB-02','1 Dimmsdale Dimmadome','Dimmsdale','AL','United States','79405','+1 (205)432-9985','+1 (259)455-3985','ddimmadome@dimmadome.com')
/
INSERT INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(10,'Dimmadome','Dale','Co-Owner',NULL,'05-APR-1993','1-FEB-02','1 Dimmsdale Dimmadome','Dimmsdale','AL','United States','79405','+1 (205)752-9985','+1 (259)455-3985','daledimmadome@dimmadome.com')
/
--INSERT TWO NEW RECORDS INTO CUSTOMER TABLE
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES(60,'Doug','Dimmadome','Dimmadome','1 Dimmsdale Dimmadome','Dimmsdale','AL','United States','79405','+1 (205)432-9985','+1 (259)455-3985','ddimmadome@dimmadome.com',9)
/
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES(61,'Dale','Dimmadome','Dimmadome','1 Dimmsdale Dimmadome','Dimmsdale','AL','United States','79405','+1 (205)752-9985','+1 (259)455-3985','daledimmadome@dimmadome.com',9)
/
--2.4
--UPDATE AARON MITCHELL IN CUSTOMER TABLE TO ROBERT WALTER
UPDATE CUSTOMER
SET CUSTOMER.FIRSTNAME='Robert',CUSTOMER.LASTNAME='WALTER'
WHERE  LOWER(CUSTOMER.LASTNAME) LIKE LOWER('MITCHELL');
/
--Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
UPDATE ARTIST
SET ARTIST.NAME='CCR'
WHERE  LOWER(ARTIST.NAME) LIKE LOWER('CREEDENCE%');
/
----2.5 LIKE
--Task – Select all invoices with a billing address like “T%”
SELECT * 
FROM INVOICE
WHERE INVOICE.BILLINGADDRESS LIKE 'T%'
/
--2.6 BETWEEN
--Task – Select all invoices that have a total between 15 and 50
SELECT * 
FROM INVOICE
WHERE INVOICE.TOTAL BETWEEN 15 AND 50
ORDER BY TOTAL ASC
/
--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * 
FROM EMPLOYEE
WHERE EMPLOYEE.HIREDATE BETWEEN '1-JUN-03' AND '1-MAR-04' 
ORDER BY HIREDATE ASC
/
--2.7 DELETE
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them)
DELETE CUSTOMER
WHERE LOWER(CUSTOMER.FIRSTNAME) LIKE LOWER('ROBERT')
AND LOWER(CUSTOMER.LASTNAME) LIKE LOWER('WALTER')
/
----3.0
--3.1 System Defined Functions
--Task – Create a function that returns the current time.
CREATE OR REPLACE PROCEDURE RETURNTIME(CTIME OUT TIMESTAMP)
IS
CTIME TIMESTAMP;
BEGIN
 SELECT TIMESTAMP INTO CTIME FROM 
 SELECT CURRENT_TIMESTAMP FROM DUAL;
END;
/
DROP FUNCTION GETTIME;
/
CREATE OR REPLACE FUNCTION GETTIME
RETURN TIMESTAMP
IS
CTIME TIMESTAMP;
BEGIN 
  SELECT CURRENT_TIMESTAMP INTO CTIME FROM DUAL;
  RETURN CTIME;
END;
/
--Task – create a function that returns the length of a mediatype from the mediatype table
  
--3.2 System Defined Aggregate Functions
--Task – Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION AVGINVOICE
RETURN INVOICE.TOTAL%TYPE
IS
AVGVAL INVOICE.TOTAL%TYPE;
BEGIN 
  SELECT AVG(INVOICE.TOTAL) INTO AVGVAL FROM INVOICE;
  RETURN AVGVAL;
END;
/
SELECT AVGINVOICE FROM DUAL;
/
--Task – Create a function that returns the most expensive track

--3.3 User Defined Scalar Functions
--Task – Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION AVGINVOICELINE
RETURN INVOICELINE.UNITPRICE%TYPE
IS
AVGINVOICELINEPRICE INVOICELINE.UNITPRICE%TYPE;
BEGIN
  SELECT AVG(INVOICELINE.UNITPRICE) INTO AVGINVOICELINEPRICE FROM INVOICELINE;
  RETURN AVGINVOICELINEPRICE;
END;
/
SELECT AVGINVOICELINE FROM DUAL;
/
----3.4 User Defined Table Valued Functions
----Task – Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION EMPLOYEE_POST1968
RETURN SYS_REFCURSOR
IS
EMPLOYEES SYS_REFCURSOR;
BEGIN
  OPEN EMPLOYEES
  FOR SELECT * FROM EMPLOYEE WHERE EMPLOYEE.BIRTHDATE>TO_DATE('01-JAN-68');
  RETURN employees;
END;
/

----4.0
--4.1 Basic Stored Procedure
--Task – Create a stored procedure that selects the first and last names of all the employees.
/
DROP EMPLOYEE_FN_LN;

/
CREATE OR REPLACE PROCEDURE EMPLOYEE_FN_LN(EMPLOYEES OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN EMPLOYEES
  FOR SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
END;
/
DECLARE
  EMPLOYEES SYS_REFCURSOR;
BEGIN
  EMPLOYEE_FN_LN(EMPLOYEES);
END;

/
SELECT firstname,lastname FROM EMPLOYEES;
/

--4.2 Stored Procedure Input Parameters
--Task – Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE EMPLOYEE_UPDATE(
CURR_ID IN EMPLOYEE.EMPLOYEEID%TYPE,
NEW_FN IN EMPLOYEE.FIRSTNAME%TYPE,
NEW_LN IN EMPLOYEE.LASTNAME%TYPE,
NEW_ADDRESS IN EMPLOYEE.ADDRESS%TYPE)
IS 
BEGIN
  UPDATE EMPLOYEE SET FIRSTNAME=NEW_FN,LASTNAME=NEW_LN,ADDRESS=NEW_ADDRESS
  WHERE EMPLOYEEID=CURR_ID;
END;

/
--Task – Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE EMPLOYEE_MANAGERS(
CURR_ID IN EMPLOYEE.EMPLOYEEID%TYPE,
MANAGERS OUT SYS_REFCURSOR)
IS 
BEGIN
  OPEN MANAGERS FOR SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE
  WHERE EMPLOYEE.ID IS (SELECT REPORTSTO FROM EMPLOYEE WHERE ID=CURR_ID); 
END;
/
--4.3 Stored Procedure Output Parameters
--Task – Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE EMPLOYEE_MANAGERS(
CURR_ID IN CUSTOMER.CUSTOMERID%TYPE,
CNAME OUT SYS_REFCURSOR)
IS 
BEGIN
  OPEN CNAME FOR SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
  WHERE CUSTOMER.ID = CURR_ID; 
END;
/