package com.ers.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.ers.util.ConnectionFactory;
import com.ers.pojos.Employee;
import com.ers.pojos.Request;

public class DaoImpl implements DAO {

	public DaoImpl() {
		
	}

	@Override
	public Employee getEmployee(String email) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from employee where email is ?";
			PreparedStatement ps =connection.prepareStatement(sql);
			ps.setString(1, email);
			ResultSet info = ps.executeQuery();
			
			Employee temp = new Employee();
			while(info.next()){
				temp.setEmail(info.getString(1));
				temp.setPassword(info.getString(2));
				temp.setId(info.getInt(3));
				temp.setFirstname(info.getString(4));
				temp.setLastname(info.getString(5));
				temp.setIsmanager(info.getInt(6));		
				return temp;
			}
			
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Employee getEmployee(int employeeid) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from employee where id is ?";
			PreparedStatement ps =connection.prepareStatement(sql);
			ps.setInt(1, employeeid);
			ResultSet info = ps.executeQuery();
			
			Employee temp = new Employee();
			while(info.next()){
				temp.setEmail(info.getString(1));
				temp.setPassword(info.getString(2));
				temp.setId(info.getInt(3));
				temp.setFirstname(info.getString(4));
				temp.setLastname(info.getString(5));
				temp.setIsmanager(info.getInt(6));		
				return temp;
			}
			
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Request getRequest(int requestid) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from requests where requestid is ?";
			PreparedStatement ps =connection.prepareStatement(sql);
			ps.setInt(1, requestid);
			ResultSet info = ps.executeQuery();
			
			Request temp = new Request();
			while(info.next()){
				temp.setStateid(info.getInt(1));
				temp.setReqdate(info.getDate(2));
				temp.setResdate(info.getDate(3));
				temp.setAmt(info.getInt(4));
				temp.setPurpose(info.getString(5));
				temp.setRequesterid(info.getInt(6));		
				temp.setResolverid(info.getInt(7));
				temp.setNote(info.getString(8));
				return temp;
			}
			
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public ArrayList<Request> getEmployeeRequests(int employeeid) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from requests where requesterid is ?";
			PreparedStatement ps =connection.prepareStatement(sql);
			ps.setInt(1, employeeid);
			ResultSet info = ps.executeQuery();
			
			ArrayList<Request> requests = new ArrayList<Request>();
			while(info.next()){
				Request temp = new Request();
				temp.setStateid(info.getInt(1));
				temp.setReqdate(info.getDate(2));
				temp.setResdate(info.getDate(3));
				temp.setAmt(info.getInt(4));
				temp.setPurpose(info.getString(5));
				temp.setRequesterid(info.getInt(6));		
				temp.setResolverid(info.getInt(7));
				temp.setNote(info.getString(8));
				requests.add(temp);
			}
			return requests;
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public String[] getStateNames(Request req) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from statetype";
			Statement ps =connection.createStatement();
			ResultSet info = ps.executeQuery();
			
			ArrayList<Request> requests = new ArrayList<Request>();
			while(info.next()){
				Request temp = new Request();
				temp.setStateid(info.getInt(1));
				temp.setReqdate(info.getDate(2));
				temp.setResdate(info.getDate(3));
				temp.setAmt(info.getInt(4));
				temp.setPurpose(info.getString(5));
				temp.setRequesterid(info.getInt(6));		
				temp.setResolverid(info.getInt(7));
				temp.setNote(info.getString(8));
				requests.add(temp);
			}
			return requests;
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Employee loginEmployee(String email, String password) {
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql="select * from employee where email is ? and password is ?";
			PreparedStatement ps =connection.prepareStatement(sql);
			ps.setString(1, email);
			ps.setString(2, password);
			ResultSet info = ps.executeQuery();
			
			Employee temp = new Employee();
			while(info.next()){
				temp.setEmail(info.getString(1));
				temp.setPassword(info.getString(2));
				temp.setId(info.getInt(3));
				temp.setFirstname(info.getString(4));
				temp.setLastname(info.getString(5));
				temp.setIsmanager(info.getInt(6));		
				return temp;
			}
			
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}
	

}
