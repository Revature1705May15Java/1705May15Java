package com.ers.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.bank.pojos.Account;
import com.bank.util.ConnectionFactory;
import com.ers.pojo.Request;
import com.ers.pojo.User;

public class ImplDao implements Dao{

	static ArrayList<Request> requests = new ArrayList<Request>();
	
	@Override
	public User getUser(String username) {
		User u = new User();
		
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			
			String sql = "SELECT * FROM bank_users WHERE user_name = ?";
					
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, username);
			
			ResultSet info = ps.executeQuery();
			while(info.next()){ 
				u.setId(info.getInt(1));  
				u.setFn(info.getString(2));
				u.setLn(info.getString(3));
				u.setPassword(info.getString(4));
				u.setUsername(info.getString(5));
				u.setRequests(getUserRequests(u.getId()));
			}
			
			if(u.getUsername() != null){System.out.println("Found a user");} //log.log("Retrieved user by username: " + userName);
			else {
				//log.log("Failed to retrieve user by username: " + userName);
				return null;
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return u;
	}

	@Override
	public User getUser(int id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public ArrayList<Request> getUserRequests(int id) {
		
		getAllRequests();
		
		ArrayList<Request> req = new ArrayList<Request>();
		Request temp = new Request();
		try(Connection connection = ConnectionFactory.getInstance().getConnection();){
			String sql = "SELECT * FROM user_account WHERE userid = " + id;
			
			Statement st = connection.createStatement();
			
			
			ResultSet info = st.executeQuery(sql);
			
			int i = 1, counter = 0;
			while(info.next()){
				int num = info.getInt(2);
				for(int k = 0; k < requests.size(); k++) {
					if (requests.get(k).getId() == num && requests.get(k).getDateClosed() == null) {
						req.add(requests.get(k));
						counter++;
					}
				}
				i++;
			}
			return req;
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return null;
	}

}
